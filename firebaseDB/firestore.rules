rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Allow read access to all collections
    match /{collection}/{document=**} {
      allow read: if true;
    }
    
    // Allow write access to specific collections
    match /products/{productId} {
      allow write: if request.resource.data.keys().hasAll(['name', 'price', 'brand', 'category', 'targetAudience', 'region', 'scrapedAt'])
                   && request.resource.data.scrapedAt is timestamp;
    }
    
    match /batchJobs/{jobId} {
      allow write: if request.resource.data.keys().hasAll(['status', 'createdAt', 'updatedAt'])
                   && request.resource.data.createdAt is timestamp
                   && request.resource.data.updatedAt is timestamp;
    }
    
    match /dashboard/{document=**} {
      allow write: if request.resource.data.keys().hasAll(['updatedAt'])
                   && request.resource.data.updatedAt is timestamp;
    }
    
    // Allow writes to dynamic collection names (brand-targetAudience-category-region)
    match /{collection}/{document=**} {
      allow write: if collection.matches(/^[a-z0-9]+-[a-z0-9]+-[a-z0-9]+-[a-z0-9]+$/)
                   && request.resource.data.keys().hasAll(['name', 'price', 'brand', 'category', 'targetAudience', 'region', 'scrapedAt'])
                   && request.resource.data.scrapedAt is timestamp
                   && request.resource.data.brand == collection.split('-')[0]
                   && request.resource.data.targetAudience == collection.split('-')[1]
                   && request.resource.data.category == collection.split('-')[2]
                   && request.resource.data.region == collection.split('-')[3];
    }
  }
}